
BLF-VLD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003ec  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000003ec  000004a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  0080006a  0080006a  000004aa  2**0
                  ALLOC
  3 .eeprom       00000040  00810000  00810000  000004aa  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .stab         00001560  00000000  00000000  000004ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000d07  00000000  00000000  00001a4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__vector_8>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_copy_data>:
  1c:	10 e0       	ldi	r17, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	ec ee       	ldi	r30, 0xEC	; 236
  24:	f3 e0       	ldi	r31, 0x03	; 3
  26:	02 c0       	rjmp	.+4      	; 0x2c <.do_copy_data_start>

00000028 <.do_copy_data_loop>:
  28:	05 90       	lpm	r0, Z+
  2a:	0d 92       	st	X+, r0

0000002c <.do_copy_data_start>:
  2c:	aa 36       	cpi	r26, 0x6A	; 106
  2e:	b1 07       	cpc	r27, r17
  30:	d9 f7       	brne	.-10     	; 0x28 <.do_copy_data_loop>

00000032 <__do_clear_bss>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	aa e6       	ldi	r26, 0x6A	; 106
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	aa 37       	cpi	r26, 0x7A	; 122
  3e:	b1 07       	cpc	r27, r17
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	6c d0       	rcall	.+216    	; 0x11c <main>
  44:	d1 c1       	rjmp	.+930    	; 0x3e8 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <clock_prescale_set>:


void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
  48:	90 e8       	ldi	r25, 0x80	; 128
  4a:	0f b6       	in	r0, 0x3f	; 63
  4c:	f8 94       	cli
  4e:	96 bd       	out	0x26, r25	; 38
  50:	86 bd       	out	0x26, r24	; 38
  52:	0f be       	out	0x3f, r0	; 63
        : /* no outputs */
        : "d" (__tmp),
          "I" (_SFR_IO_ADDR(CLKPR)),
          "d" (__x)
        : "r0");
}
  54:	08 95       	ret

00000056 <nullmode>:


void nullmode(uint8_t offset)
{
    return;
}
  56:	08 95       	ret

00000058 <__vector_8>:
 * hints on when to switch off to follow the programming sequence
 * If built with battery monitoring, check battery voltage and set a flag
 * if it drops below a given threshold
 */
ISR(WDT_vect)
{
  58:	1f 92       	push	r1
  5a:	0f 92       	push	r0
  5c:	0f b6       	in	r0, 0x3f	; 63
  5e:	0f 92       	push	r0
  60:	11 24       	eor	r1, r1
  62:	2f 93       	push	r18
  64:	3f 93       	push	r19
  66:	4f 93       	push	r20
  68:	5f 93       	push	r21
  6a:	6f 93       	push	r22
  6c:	7f 93       	push	r23
  6e:	8f 93       	push	r24
  70:	9f 93       	push	r25
  72:	af 93       	push	r26
  74:	bf 93       	push	r27
  76:	ef 93       	push	r30
  78:	ff 93       	push	r31
    uint8_t *click_cell;
#ifdef MONITOR_BAT
    static uint8_t lbat_cnt = 0;
#endif

    if(ticks < 8){
  7a:	20 91 78 00 	lds	r18, 0x0078
  7e:	28 30       	cpi	r18, 0x08	; 8
  80:	08 f0       	brcs	.+2      	; 0x84 <__vector_8+0x2c>
  82:	3b c0       	rjmp	.+118    	; 0xfa <__stack+0x5b>

        click_cell = (uint8_t *) EE_LAST_CLICK + state.click_cell;
  84:	80 91 71 00 	lds	r24, 0x0071
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	08 96       	adiw	r24, 0x08	; 8

        ++ticks;
  8c:	2f 5f       	subi	r18, 0xFF	; 255
  8e:	20 93 78 00 	sts	0x0078, r18

        switch(ticks){
  92:	24 30       	cpi	r18, 0x04	; 4
  94:	41 f0       	breq	.+16     	; 0xa6 <__stack+0x7>
  96:	28 30       	cpi	r18, 0x08	; 8
  98:	19 f0       	breq	.+6      	; 0xa0 <__stack+0x1>
  9a:	21 30       	cpi	r18, 0x01	; 1
  9c:	71 f5       	brne	.+92     	; 0xfa <__stack+0x5b>
  9e:	16 c0       	rjmp	.+44     	; 0xcc <__stack+0x2d>
        /* last_click is initialised to tap_short in main() on startup. By the
         * time we reach four ticks, we change it to tap_long (more than a
         * second). After eight ticks (two seconds) we clear last_click.
         */
        case 8:
            eeprom_write_byte(click_cell, tap_none);
  a0:	60 e0       	ldi	r22, 0x00	; 0
  a2:	94 d1       	rcall	.+808    	; 0x3cc <__eewr_byte_tn13>
  a4:	2a c0       	rjmp	.+84     	; 0xfa <__stack+0x5b>
            break;

#ifdef PROGRAMMABLE
        case 4:
            eeprom_write_byte(click_cell, tap_long);
  a6:	62 e0       	ldi	r22, 0x02	; 2
  a8:	91 d1       	rcall	.+802    	; 0x3cc <__eewr_byte_tn13>
            /* give hints on when to switch off in programming mode. Programming
             * stages 1,2 and 4 expect a short tap (0s - 1s), so we signal at
             * 250ms. Stage 3 expects a long tap (1s - 2s), so we signal at
             * 1s. Signalling is done by toggling the PWM-level's MSB for 100ms.
             */
            if(state.prog_stage == prog_3){
  aa:	80 91 6d 00 	lds	r24, 0x006D
  ae:	84 30       	cpi	r24, 0x04	; 4
  b0:	21 f5       	brne	.+72     	; 0xfa <__stack+0x5b>
                PWM_LVL ^= (uint8_t) 0x80;
  b2:	89 b5       	in	r24, 0x29	; 41
  b4:	80 58       	subi	r24, 0x80	; 128
  b6:	89 bd       	out	0x29, r24	; 41
  b8:	88 ee       	ldi	r24, 0xE8	; 232
  ba:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  bc:	28 e7       	ldi	r18, 0x78	; 120
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	f9 01       	movw	r30, r18
  c2:	31 97       	sbiw	r30, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <__stack+0x23>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  c6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__stack+0x21>
  ca:	14 c0       	rjmp	.+40     	; 0xf4 <__stack+0x55>
            }
#endif
            break;
#ifdef PROGHELPER
        case 1:
            if(state.prog_stage == prog_1
  cc:	90 91 6d 00 	lds	r25, 0x006D
  d0:	89 2f       	mov	r24, r25
  d2:	82 50       	subi	r24, 0x02	; 2
  d4:	82 30       	cpi	r24, 0x02	; 2
  d6:	10 f0       	brcs	.+4      	; 0xdc <__stack+0x3d>
  d8:	95 30       	cpi	r25, 0x05	; 5
  da:	79 f4       	brne	.+30     	; 0xfa <__stack+0x5b>
                    || state.prog_stage == prog_2
                    || state.prog_stage == prog_4)
            {
                PWM_LVL ^= (uint8_t) 0x80;
  dc:	89 b5       	in	r24, 0x29	; 41
  de:	80 58       	subi	r24, 0x80	; 128
  e0:	89 bd       	out	0x29, r24	; 41
  e2:	88 ee       	ldi	r24, 0xE8	; 232
  e4:	93 e0       	ldi	r25, 0x03	; 3
  e6:	28 e7       	ldi	r18, 0x78	; 120
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	f9 01       	movw	r30, r18
  ec:	31 97       	sbiw	r30, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <__stack+0x4d>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  f0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  f2:	d9 f7       	brne	.-10     	; 0xea <__stack+0x4b>
                _delay_ms(100);
                PWM_LVL ^= (uint8_t) 0x80;
  f4:	89 b5       	in	r24, 0x29	; 41
  f6:	80 58       	subi	r24, 0x80	; 128
  f8:	89 bd       	out	0x29, r24	; 41
        }else{
            ADCSRA |= _BV(ADSC);
        }
    }
#endif
}
  fa:	ff 91       	pop	r31
  fc:	ef 91       	pop	r30
  fe:	bf 91       	pop	r27
 100:	af 91       	pop	r26
 102:	9f 91       	pop	r25
 104:	8f 91       	pop	r24
 106:	7f 91       	pop	r23
 108:	6f 91       	pop	r22
 10a:	5f 91       	pop	r21
 10c:	4f 91       	pop	r20
 10e:	3f 91       	pop	r19
 110:	2f 91       	pop	r18
 112:	0f 90       	pop	r0
 114:	0f be       	out	0x3f, r0	; 63
 116:	0f 90       	pop	r0
 118:	1f 90       	pop	r1
 11a:	18 95       	reti

0000011c <main>:
{
    return;
}

int main(void)
{
 11c:	ef 92       	push	r14
 11e:	ff 92       	push	r15
 120:	0f 93       	push	r16
 122:	1f 93       	push	r17
#ifdef EXTENDED_MODES
    uint8_t signal = 0;
#endif

    // set whole PORTB initially to output
    DDRB = 0xff;
 124:	8f ef       	ldi	r24, 0xFF	; 255
 126:	87 bb       	out	0x17, r24	; 23
    // PORTB = 0x00; // initialised to 0 anyway

    // Initialise PWM on output pin and set level to zero
    TCCR0A = PWM_TCR;
 128:	81 e2       	ldi	r24, 0x21	; 33
 12a:	8f bd       	out	0x2f, r24	; 47
    TCCR0B = PWM_SCL;
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	83 bf       	out	0x33, r24	; 51
    // PWM_LVL = 0; // initialised to 0 anyway

    // read the state data at the start of the eeprom into a struct
    eeprom_read_block(&state, 0, sizeof(State_t));
 130:	8a e6       	ldi	r24, 0x6A	; 106
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	70 e0       	ldi	r23, 0x00	; 0
 138:	4e e0       	ldi	r20, 0x0E	; 14
 13a:	50 e0       	ldi	r21, 0x00	; 0
 13c:	28 d1       	rcall	.+592    	; 0x38e <__eerd_block_tn13>

    last_click = state.last_click[state.click_cell];
 13e:	80 91 71 00 	lds	r24, 0x0071
 142:	e8 2f       	mov	r30, r24
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	e6 59       	subi	r30, 0x96	; 150
 148:	ff 4f       	sbci	r31, 0xFF	; 255
 14a:	00 85       	ldd	r16, Z+8	; 0x08

    // make sure we cycle through the memory cells in the last_click array
    // to spread the wear on the eeprom a bit

    next_cell = state.click_cell + 1;
 14c:	f8 2e       	mov	r15, r24
 14e:	f3 94       	inc	r15
    if(next_cell >= CLICK_CELLS)
 150:	82 e0       	ldi	r24, 0x02	; 2
 152:	8f 15       	cp	r24, r15
 154:	08 f4       	brcc	.+2      	; 0x158 <main+0x3c>
 156:	ff 24       	eor	r15, r15
        next_cell = 0;

#ifdef EXTENDED_MODES
    // if we are in standard mode and got NUM_EXT_CLICKS in a row, change to
    // extended mode
    if(!state.extended && state.clicks >= NUM_EXT_CLICKS){
 158:	80 91 6e 00 	lds	r24, 0x006E
 15c:	88 23       	and	r24, r24
 15e:	89 f4       	brne	.+34     	; 0x182 <main+0x66>
 160:	80 91 70 00 	lds	r24, 0x0070
 164:	86 30       	cpi	r24, 0x06	; 6
 166:	68 f0       	brcs	.+26     	; 0x182 <main+0x66>
        state.extended = 1;
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	80 93 6e 00 	sts	0x006E, r24
        state.ext_mode = EMPTY_MODE;
 16e:	8f ef       	ldi	r24, 0xFF	; 255
 170:	80 93 6f 00 	sts	0x006F, r24
        state.prog_stage = prog_undef;
 174:	10 92 6d 00 	sts	0x006D, r1
        state.clicks = 0;
 178:	10 92 70 00 	sts	0x0070, r1
 17c:	ee 24       	eor	r14, r14
 17e:	e3 94       	inc	r14
 180:	01 c0       	rjmp	.+2      	; 0x184 <main+0x68>
 182:	ee 24       	eor	r14, r14
        // delay signal until state is saved in eeprom
        signal = 1;
    }

    // handling of extended mode
    if(state.extended){
 184:	80 91 6e 00 	lds	r24, 0x006E
 188:	88 23       	and	r24, r24
 18a:	11 f4       	brne	.+4      	; 0x190 <main+0x74>
 18c:	10 e0       	ldi	r17, 0x00	; 0
 18e:	1a c0       	rjmp	.+52     	; 0x1c4 <main+0xa8>

        // in extended mode, we can cycle through modes indefinitely until
        // one mode is held for more than two seconds
        if(last_click != tap_none){
 190:	00 23       	and	r16, r16
 192:	61 f0       	breq	.+24     	; 0x1ac <main+0x90>
            ++state.ext_mode;
 194:	80 91 6f 00 	lds	r24, 0x006F
 198:	8f 5f       	subi	r24, 0xFF	; 255
 19a:	80 93 6f 00 	sts	0x006F, r24

            if(state.ext_mode >= NUM_EXT_MODES)
 19e:	8c 30       	cpi	r24, 0x0C	; 12
 1a0:	10 f0       	brcs	.+4      	; 0x1a6 <main+0x8a>
                state.ext_mode = 0;
 1a2:	10 92 6f 00 	sts	0x006F, r1

            mode_idx = state.ext_mode;
 1a6:	10 91 6f 00 	lds	r17, 0x006F
 1aa:	0c c0       	rjmp	.+24     	; 0x1c4 <main+0xa8>
        } else{
            // leave extended mode if previous mode was on longer than 2 seconds
            state.extended = 0;
 1ac:	10 92 6e 00 	sts	0x006E, r1
            signal = 1; // wait with signal until eeprom is written

#ifdef PROGRAMMABLE
            // remember last mode and init programming
            state.chosen_mode = state.ext_mode;
 1b0:	80 91 6f 00 	lds	r24, 0x006F
 1b4:	80 93 6c 00 	sts	0x006C, r24
            state.prog_stage = prog_init;
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	80 93 6d 00 	sts	0x006D, r24
 1be:	10 e0       	ldi	r17, 0x00	; 0
 1c0:	ee 24       	eor	r14, r14
 1c2:	e3 94       	inc	r14
    /*
     * mode programming. We have the mode slot to be programmed saved in
     * state.target_mode, the mode to store in state.chosen_mode. User needs
     * to acknowledge by following a tapping pattern of short-short-long-short.
     */
    if(state.prog_stage >= prog_init){
 1c4:	80 91 6d 00 	lds	r24, 0x006D
 1c8:	88 23       	and	r24, r24
 1ca:	81 f1       	breq	.+96     	; 0x22c <main+0x110>

        switch(state.prog_stage){
 1cc:	84 30       	cpi	r24, 0x04	; 4
 1ce:	28 f4       	brcc	.+10     	; 0x1da <main+0xbe>
 1d0:	82 30       	cpi	r24, 0x02	; 2
 1d2:	50 f4       	brcc	.+20     	; 0x1e8 <main+0xcc>
 1d4:	81 30       	cpi	r24, 0x01	; 1
 1d6:	09 f5       	brne	.+66     	; 0x21a <main+0xfe>
 1d8:	05 c0       	rjmp	.+10     	; 0x1e4 <main+0xc8>
 1da:	84 30       	cpi	r24, 0x04	; 4
 1dc:	59 f0       	breq	.+22     	; 0x1f4 <main+0xd8>
 1de:	85 30       	cpi	r24, 0x05	; 5
 1e0:	e1 f4       	brne	.+56     	; 0x21a <main+0xfe>
 1e2:	0e c0       	rjmp	.+28     	; 0x200 <main+0xe4>
            case prog_init:
                state.prog_stage = prog_1;
 1e4:	82 e0       	ldi	r24, 0x02	; 2
 1e6:	03 c0       	rjmp	.+6      	; 0x1ee <main+0xd2>
                break;
            case prog_1:
            case prog_2:
                if(last_click == tap_short)
 1e8:	01 30       	cpi	r16, 0x01	; 1
 1ea:	41 f4       	brne	.+16     	; 0x1fc <main+0xe0>
                    ++state.prog_stage;
 1ec:	8f 5f       	subi	r24, 0xFF	; 255
 1ee:	80 93 6d 00 	sts	0x006D, r24
 1f2:	1a c0       	rjmp	.+52     	; 0x228 <main+0x10c>
                else
                    state.prog_stage = prog_nak;
                break;
            case prog_3:
                if(last_click == tap_long)
 1f4:	02 30       	cpi	r16, 0x02	; 2
 1f6:	11 f4       	brne	.+4      	; 0x1fc <main+0xe0>
                    ++state.prog_stage;
 1f8:	85 e0       	ldi	r24, 0x05	; 5
 1fa:	f9 cf       	rjmp	.-14     	; 0x1ee <main+0xd2>
                else
                    state.prog_stage = prog_nak;
 1fc:	86 e0       	ldi	r24, 0x06	; 6
 1fe:	f7 cf       	rjmp	.-18     	; 0x1ee <main+0xd2>
                break;
            case prog_4:
                if(last_click == tap_short){
 200:	01 30       	cpi	r16, 0x01	; 1
 202:	59 f4       	brne	.+22     	; 0x21a <main+0xfe>
                    // sequence completed, update mode_arr and eeprom
                    state.mode_arr[state.target_mode] = state.chosen_mode;
 204:	80 91 6b 00 	lds	r24, 0x006B
 208:	60 91 6c 00 	lds	r22, 0x006C
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	fc 01       	movw	r30, r24
 210:	e6 59       	subi	r30, 0x96	; 150
 212:	ff 4f       	sbci	r31, 0xFF	; 255
 214:	63 87       	std	Z+11, r22	; 0x0b
                    eeprom_write_byte((uint8_t *)EE_MODES_BASE + state.target_mode,
 216:	0b 96       	adiw	r24, 0x0b	; 11
 218:	d9 d0       	rcall	.+434    	; 0x3cc <__eewr_byte_tn13>
                }
                // fall through
            case prog_nak:
            default:
                // clean up when leaving programming mode
                state.prog_stage = prog_undef;
 21a:	10 92 6d 00 	sts	0x006D, r1
                state.target_mode = EMPTY_MODE;
 21e:	8f ef       	ldi	r24, 0xFF	; 255
 220:	80 93 6b 00 	sts	0x006B, r24
                state.chosen_mode = EMPTY_MODE;
 224:	80 93 6c 00 	sts	0x006C, r24
                break;
        }

        state.clicks = 0;
 228:	10 92 70 00 	sts	0x0070, r1
    }
#endif	// PROGRAMMABLE
#endif	// EXTENDED_MODES

    // standard mode operation
    if(!state.extended){
 22c:	80 91 6e 00 	lds	r24, 0x006E
 230:	88 23       	and	r24, r24
 232:	11 f5       	brne	.+68     	; 0x278 <main+0x15c>
        if(last_click != tap_none){
 234:	00 23       	and	r16, r16
 236:	49 f0       	breq	.+18     	; 0x24a <main+0x12e>
            // we're coming back from a tap, increment mode
            ++state.mode;
 238:	80 91 6a 00 	lds	r24, 0x006A
 23c:	8f 5f       	subi	r24, 0xFF	; 255
 23e:	80 93 6a 00 	sts	0x006A, r24

#ifdef EXTENDED_MODES
            // ...and count consecutive clicks
            ++state.clicks;
 242:	80 91 70 00 	lds	r24, 0x0070
 246:	8f 5f       	subi	r24, 0xFF	; 255
 248:	09 c0       	rjmp	.+18     	; 0x25c <main+0x140>
        }else{
            // start up from regular previous use (longer than 2 seconds)
#ifdef EXTENDED_MODES
#ifdef PROGRAMMABLE
            // remember current mode slot in case it is to be programmed
            if(state.prog_stage == prog_undef)
 24a:	80 91 6d 00 	lds	r24, 0x006D
 24e:	88 23       	and	r24, r24
 250:	21 f4       	brne	.+8      	; 0x25a <main+0x13e>
                state.target_mode = state.mode;
 252:	80 91 6a 00 	lds	r24, 0x006A
 256:	80 93 6b 00 	sts	0x006B, r24
#endif
            // reset click counter
            state.clicks = 1;
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	80 93 70 00 	sts	0x0070, r24
            // reset mode slot
            state.mode = 0;
#endif
        }

        if(state.mode >= NUM_MODES)
 260:	80 91 6a 00 	lds	r24, 0x006A
 264:	83 30       	cpi	r24, 0x03	; 3
 266:	10 f0       	brcs	.+4      	; 0x26c <main+0x150>
            state.mode = 0;
 268:	10 92 6a 00 	sts	0x006A, r1

        // get index of mode stored in the current slot
        mode_idx = state.mode_arr[state.mode];
 26c:	e0 91 6a 00 	lds	r30, 0x006A
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	e6 59       	subi	r30, 0x96	; 150
 274:	ff 4f       	sbci	r31, 0xFF	; 255
 276:	13 85       	ldd	r17, Z+11	; 0x0b
    }

    // initialise click type for next start up
    state.last_click[next_cell] = tap_short;
 278:	ef 2d       	mov	r30, r15
 27a:	f0 e0       	ldi	r31, 0x00	; 0
 27c:	e6 59       	subi	r30, 0x96	; 150
 27e:	ff 4f       	sbci	r31, 0xFF	; 255
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	80 87       	std	Z+8, r24	; 0x08
    state.click_cell = next_cell;
 284:	f0 92 71 00 	sts	0x0071, r15

    // write back state to eeprom but omit the mode configuration.
    // Minimises risk of corruption. Everything else will right itself
    // eventually, but modes will stay broken until reprogrammed.
    eeprom_write_block(&state, 0, sizeof(State_t) - sizeof(state.mode_arr));
 288:	8a e6       	ldi	r24, 0x6A	; 106
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	60 e0       	ldi	r22, 0x00	; 0
 28e:	70 e0       	ldi	r23, 0x00	; 0
 290:	4b e0       	ldi	r20, 0x0B	; 11
 292:	50 e0       	ldi	r21, 0x00	; 0
 294:	93 d0       	rcall	.+294    	; 0x3bc <__eewr_block_tn13>

#ifdef EXTENDED_MODES
    // signal entering or leaving extended mode
    if(signal)
 296:	ee 20       	and	r14, r14
 298:	81 f0       	breq	.+32     	; 0x2ba <main+0x19e>
 29a:	80 e6       	ldi	r24, 0x60	; 96
 29c:	9a ee       	ldi	r25, 0xEA	; 234
 29e:	fc 01       	movw	r30, r24
 2a0:	31 97       	sbiw	r30, 0x01	; 1
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <main+0x184>
{
    // Only called from main at PWM_LVL 0. Give short flash
    _delay_ms(50);
    // blink one time
    for(uint8_t i = 0; i < 2; ++i){
        PWM_LVL = ~PWM_LVL;
 2a4:	29 b5       	in	r18, 0x29	; 41
 2a6:	20 95       	com	r18
 2a8:	29 bd       	out	0x29, r18	; 41
 2aa:	fc 01       	movw	r30, r24
 2ac:	31 97       	sbiw	r30, 0x01	; 1
 2ae:	f1 f7       	brne	.-4      	; 0x2ac <main+0x190>
 2b0:	29 b5       	in	r18, 0x29	; 41
 2b2:	20 95       	com	r18
 2b4:	29 bd       	out	0x29, r18	; 41
 2b6:	01 97       	sbiw	r24, 0x01	; 1
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <main+0x19a>
    if(signal)
        ext_signal();
#endif

    // sanity check in case of corrupted eeprom
    if(mode_idx >= NUM_EXT_MODES)
 2ba:	1c 30       	cpi	r17, 0x0C	; 12
 2bc:	08 f0       	brcs	.+2      	; 0x2c0 <main+0x1a4>
 2be:	10 e0       	ldi	r17, 0x00	; 0
        mode_idx = 0;

    // fetch pointer to selected mode func from array
    offset = mode_idx << 2;
 2c0:	11 0f       	add	r17, r17
 2c2:	11 0f       	add	r17, r17
    func_idx = eeprom_read_byte((uint8_t *) EE_MODEDATA_BASE + offset);
 2c4:	81 2f       	mov	r24, r17
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	40 96       	adiw	r24, 0x10	; 16
 2ca:	70 d0       	rcall	.+224    	; 0x3ac <__eerd_byte_tn13>
 2cc:	e8 2f       	mov	r30, r24
     */
    wdt_mode = ((uint8_t) _BV(WDTIE)
                | (uint8_t) (WDTO_250MS & (uint8_t) 0x07)
                | (uint8_t) ((WDTO_250MS & (uint8_t) 0x08) << 2));

    cli();
 2ce:	f8 94       	cli
    wdt_reset();
 2d0:	a8 95       	wdr

    // unlock register
    WDTCR = ((uint8_t) _BV(WDCE) | (uint8_t) _BV(WDE));
 2d2:	88 e1       	ldi	r24, 0x18	; 24
 2d4:	81 bd       	out	0x21, r24	; 33

    // set new mode and prescaler
    WDTCR = wdt_mode;
 2d6:	84 e4       	ldi	r24, 0x44	; 68
 2d8:	81 bd       	out	0x21, r24	; 33

    sei();
 2da:	78 94       	sei

    // start watchdog timer
    start_wdt();

    // call mode func
    (*mode_func_arr[func_idx])(offset);
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	ee 0f       	add	r30, r30
 2e0:	ff 1f       	adc	r31, r31
 2e2:	e0 5a       	subi	r30, 0xA0	; 160
 2e4:	ff 4f       	sbci	r31, 0xFF	; 255
 2e6:	01 90       	ld	r0, Z+
 2e8:	f0 81       	ld	r31, Z
 2ea:	e0 2d       	mov	r30, r0
 2ec:	81 2f       	mov	r24, r17
 2ee:	09 95       	icall
 2f0:	ff cf       	rjmp	.-2      	; 0x2f0 <main+0x1d4>

000002f2 <strobe>:
 * With this parameters quite a lot of modes can be realised. Permanent
 * strobing (no pause), police style (strobe group of 1s length, then 1s pause),
 * and beacons (single strobe in group, long pause)
 */
void strobe(uint8_t offset)
{
 2f2:	cf 92       	push	r12
 2f4:	df 92       	push	r13
 2f6:	ef 92       	push	r14
 2f8:	ff 92       	push	r15
 2fa:	0f 93       	push	r16
 2fc:	1f 93       	push	r17
    uint8_t pulse, pulse_off, count, pause, i, pwm;

    pulse = eeprom_read_byte((uint8_t *) EE_MODEDATA_BASE + offset + 1);
 2fe:	08 2f       	mov	r16, r24
 300:	10 e0       	ldi	r17, 0x00	; 0
 302:	c8 01       	movw	r24, r16
 304:	41 96       	adiw	r24, 0x11	; 17
 306:	52 d0       	rcall	.+164    	; 0x3ac <__eerd_byte_tn13>
 308:	f8 2e       	mov	r15, r24
    count = eeprom_read_byte((uint8_t *) EE_MODEDATA_BASE + offset + 2);
 30a:	c8 01       	movw	r24, r16
 30c:	42 96       	adiw	r24, 0x12	; 18
 30e:	4e d0       	rcall	.+156    	; 0x3ac <__eerd_byte_tn13>
 310:	e8 2e       	mov	r14, r24
    pause = eeprom_read_byte((uint8_t *) EE_MODEDATA_BASE + offset + 3);
 312:	c8 01       	movw	r24, r16
 314:	43 96       	adiw	r24, 0x13	; 19
 316:	4a d0       	rcall	.+148    	; 0x3ac <__eerd_byte_tn13>

    pulse_off = (uint8_t) pulse << (uint8_t) 2; // pause between pulses,
 318:	20 e0       	ldi	r18, 0x00	; 0
                                                // 2 * pulse length
    pwm = 255;
    while(1){
        // pulse group
        for(i = 0; i < count; ++i){
            PWM_LVL = pwm;
 31a:	cc 24       	eor	r12, r12
 31c:	ca 94       	dec	r12
            sleep_ms(pulse);
 31e:	0f 2d       	mov	r16, r15
 320:	dd 24       	eor	r13, r13
 322:	60 eb       	ldi	r22, 0xB0	; 176
 324:	74 e0       	ldi	r23, 0x04	; 4

    pulse = eeprom_read_byte((uint8_t *) EE_MODEDATA_BASE + offset + 1);
    count = eeprom_read_byte((uint8_t *) EE_MODEDATA_BASE + offset + 2);
    pause = eeprom_read_byte((uint8_t *) EE_MODEDATA_BASE + offset + 3);

    pulse_off = (uint8_t) pulse << (uint8_t) 2; // pause between pulses,
 326:	ff 0c       	add	r15, r15
 328:	ff 0c       	add	r15, r15
        // pulse group
        for(i = 0; i < count; ++i){
            PWM_LVL = pwm;
            sleep_ms(pulse);
            PWM_LVL = 0;
            sleep_ms(pulse_off);
 32a:	10 e0       	ldi	r17, 0x00	; 0
        }

        // pause between groups
        sleep_sec(pause);
 32c:	48 2f       	mov	r20, r24
 32e:	50 e0       	ldi	r21, 0x00	; 0
 330:	a8 e7       	ldi	r26, 0x78	; 120
 332:	b0 e0       	ldi	r27, 0x00	; 0
 334:	15 c0       	rjmp	.+42     	; 0x360 <strobe+0x6e>
                                                // 2 * pulse length
    pwm = 255;
    while(1){
        // pulse group
        for(i = 0; i < count; ++i){
            PWM_LVL = pwm;
 336:	c9 bc       	out	0x29, r12	; 41
            sleep_ms(pulse);
 338:	80 2f       	mov	r24, r16
 33a:	9d 2d       	mov	r25, r13
 33c:	04 c0       	rjmp	.+8      	; 0x346 <strobe+0x54>
 33e:	fb 01       	movw	r30, r22
 340:	31 97       	sbiw	r30, 0x01	; 1
 342:	f1 f7       	brne	.-4      	; 0x340 <strobe+0x4e>
 */
static void inline sleep_ms(uint16_t ms)
{
    while(ms >= 1){
        _delay_ms(1);
        --ms;
 344:	01 97       	sbiw	r24, 0x01	; 1
 * whole floating point handling code and increase flash image size by about
 * 3.5kB
 */
static void inline sleep_ms(uint16_t ms)
{
    while(ms >= 1){
 346:	00 97       	sbiw	r24, 0x00	; 0
 348:	d1 f7       	brne	.-12     	; 0x33e <strobe+0x4c>
    while(1){
        // pulse group
        for(i = 0; i < count; ++i){
            PWM_LVL = pwm;
            sleep_ms(pulse);
            PWM_LVL = 0;
 34a:	19 bc       	out	0x29, r1	; 41
            sleep_ms(pulse_off);
 34c:	8f 2d       	mov	r24, r15
 34e:	91 2f       	mov	r25, r17
 350:	04 c0       	rjmp	.+8      	; 0x35a <strobe+0x68>
 352:	fb 01       	movw	r30, r22
 354:	31 97       	sbiw	r30, 0x01	; 1
 356:	f1 f7       	brne	.-4      	; 0x354 <strobe+0x62>
 */
static void inline sleep_ms(uint16_t ms)
{
    while(ms >= 1){
        _delay_ms(1);
        --ms;
 358:	01 97       	sbiw	r24, 0x01	; 1
 * whole floating point handling code and increase flash image size by about
 * 3.5kB
 */
static void inline sleep_ms(uint16_t ms)
{
    while(ms >= 1){
 35a:	00 97       	sbiw	r24, 0x00	; 0
 35c:	d1 f7       	brne	.-12     	; 0x352 <strobe+0x60>
    pulse_off = (uint8_t) pulse << (uint8_t) 2; // pause between pulses,
                                                // 2 * pulse length
    pwm = 255;
    while(1){
        // pulse group
        for(i = 0; i < count; ++i){
 35e:	2f 5f       	subi	r18, 0xFF	; 255
 360:	2e 15       	cp	r18, r14
 362:	48 f3       	brcs	.-46     	; 0x336 <strobe+0x44>
            PWM_LVL = 0;
            sleep_ms(pulse_off);
        }

        // pause between groups
        sleep_sec(pause);
 364:	9a 01       	movw	r18, r20
 366:	09 c0       	rjmp	.+18     	; 0x37a <strobe+0x88>
 368:	80 e1       	ldi	r24, 0x10	; 16
 36a:	97 e2       	ldi	r25, 0x27	; 39
 36c:	fd 01       	movw	r30, r26
 36e:	31 97       	sbiw	r30, 0x01	; 1
 370:	f1 f7       	brne	.-4      	; 0x36e <strobe+0x7c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 372:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 374:	d9 f7       	brne	.-10     	; 0x36c <strobe+0x7a>
 */
static void inline sleep_sec(uint16_t sec)
{
    while(sec >= 1){
        _delay_ms(1000);
        --sec;
 376:	21 50       	subi	r18, 0x01	; 1
 378:	30 40       	sbci	r19, 0x00	; 0
/*
 * Delay for sec seconds
 */
static void inline sleep_sec(uint16_t sec)
{
    while(sec >= 1){
 37a:	21 15       	cp	r18, r1
 37c:	31 05       	cpc	r19, r1
 37e:	a1 f7       	brne	.-24     	; 0x368 <strobe+0x76>
 380:	20 e0       	ldi	r18, 0x00	; 0
 382:	ee cf       	rjmp	.-36     	; 0x360 <strobe+0x6e>

00000384 <const_level>:
 * Set PWM to the level stored in the mode's first variable.
 */
void const_level(const uint8_t offset)
{

    PWM_LVL = eeprom_read_byte((uint8_t *) EE_MODEDATA_BASE + offset + 1);
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	41 96       	adiw	r24, 0x11	; 17
 388:	11 d0       	rcall	.+34     	; 0x3ac <__eerd_byte_tn13>
 38a:	89 bd       	out	0x29, r24	; 41
 38c:	ff cf       	rjmp	.-2      	; 0x38c <const_level+0x8>

0000038e <__eerd_block_tn13>:
 38e:	a8 2f       	mov	r26, r24
 390:	86 2f       	mov	r24, r22

00000392 <__eerd_blraw_tn13>:
 392:	e8 2f       	mov	r30, r24
 394:	e1 99       	sbic	0x1c, 1	; 28
 396:	fe cf       	rjmp	.-4      	; 0x394 <__eerd_blraw_tn13+0x2>
 398:	1f ba       	out	0x1f, r1	; 31
 39a:	05 c0       	rjmp	.+10     	; 0x3a6 <__eerd_blraw_tn13+0x14>
 39c:	ee bb       	out	0x1e, r30	; 30
 39e:	e0 9a       	sbi	0x1c, 0	; 28
 3a0:	e3 95       	inc	r30
 3a2:	0d b2       	in	r0, 0x1d	; 29
 3a4:	0d 92       	st	X+, r0
 3a6:	41 50       	subi	r20, 0x01	; 1
 3a8:	c8 f7       	brcc	.-14     	; 0x39c <__eerd_blraw_tn13+0xa>
 3aa:	08 95       	ret

000003ac <__eerd_byte_tn13>:
 3ac:	e1 99       	sbic	0x1c, 1	; 28
 3ae:	fe cf       	rjmp	.-4      	; 0x3ac <__eerd_byte_tn13>
 3b0:	1f ba       	out	0x1f, r1	; 31
 3b2:	8e bb       	out	0x1e, r24	; 30
 3b4:	e0 9a       	sbi	0x1c, 0	; 28
 3b6:	99 27       	eor	r25, r25
 3b8:	8d b3       	in	r24, 0x1d	; 29
 3ba:	08 95       	ret

000003bc <__eewr_block_tn13>:
 3bc:	a8 2f       	mov	r26, r24
 3be:	86 2f       	mov	r24, r22
 3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <__eewr_block_tn13+0xa>
 3c2:	2d 91       	ld	r18, X+
 3c4:	04 d0       	rcall	.+8      	; 0x3ce <__eewr_r18_tn13>
 3c6:	41 50       	subi	r20, 0x01	; 1
 3c8:	e0 f7       	brcc	.-8      	; 0x3c2 <__eewr_block_tn13+0x6>
 3ca:	08 95       	ret

000003cc <__eewr_byte_tn13>:
 3cc:	26 2f       	mov	r18, r22

000003ce <__eewr_r18_tn13>:
 3ce:	e1 99       	sbic	0x1c, 1	; 28
 3d0:	fe cf       	rjmp	.-4      	; 0x3ce <__eewr_r18_tn13>
 3d2:	1c ba       	out	0x1c, r1	; 28
 3d4:	1f ba       	out	0x1f, r1	; 31
 3d6:	8e bb       	out	0x1e, r24	; 30
 3d8:	2d bb       	out	0x1d, r18	; 29
 3da:	0f b6       	in	r0, 0x3f	; 63
 3dc:	f8 94       	cli
 3de:	e2 9a       	sbi	0x1c, 2	; 28
 3e0:	e1 9a       	sbi	0x1c, 1	; 28
 3e2:	0f be       	out	0x3f, r0	; 63
 3e4:	01 96       	adiw	r24, 0x01	; 1
 3e6:	08 95       	ret

000003e8 <_exit>:
 3e8:	f8 94       	cli

000003ea <__stop_program>:
 3ea:	ff cf       	rjmp	.-2      	; 0x3ea <__stop_program>
